{
    "project": {},
    "files": {
        "src/bitstream.js": {
            "name": "src/bitstream.js",
            "modules": {},
            "classes": {
                "Bitstream": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/connection.js": {
            "name": "src/connection.js",
            "modules": {},
            "classes": {
                "Connection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/in_description.js": {
            "name": "src/in_description.js",
            "modules": {},
            "classes": {
                "InDescription": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/out_description.js": {
            "name": "src/out_description.js",
            "modules": {},
            "classes": {
                "OutDescription": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/registry.js": {
            "name": "src/registry.js",
            "modules": {},
            "classes": {
                "Registry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/rpc.js": {
            "name": "src/rpc.js",
            "modules": {},
            "classes": {
                "Rpc": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/wasabi.js": {
            "name": "src/wasabi.js",
            "modules": {},
            "classes": {
                "Wasabi": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Bitstream": {
            "name": "Bitstream",
            "shortname": "Bitstream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/bitstream.js",
            "line": 4,
            "description": "Manages the packing/unpacking of values as a set number of bits",
            "is_constructor": 1,
            "params": [
                {
                    "name": "buffer",
                    "description": "an array of 7-bit integers representing the intial\ndata for this Bitstream",
                    "type": "Array"
                }
            ]
        },
        "Connection": {
            "name": "Connection",
            "shortname": "Connection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/connection.js",
            "line": 3,
            "description": "Represents a connection to another Wasabi instance",
            "is_constructor": 1,
            "params": [
                {
                    "name": "socket",
                    "description": "The socket.io socket used to communicate with\nthe remote host",
                    "type": "Socket"
                },
                {
                    "name": "ghostFrom",
                    "description": "Accept ghosted NetObject from this client",
                    "type": "Boolean"
                },
                {
                    "name": "ghostTo",
                    "description": "Ghost NetObjects to this client",
                    "type": "Boolean"
                },
                {
                    "name": "scopeCallback",
                    "description": "The function to call in order\nto determine which local objects are in scope for this client.\nThis function takes no parameters and should return an Array\nof NetObjects in scope.",
                    "type": "Function"
                }
            ]
        },
        "InDescription": {
            "name": "InDescription",
            "shortname": "InDescription",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/in_description.js",
            "line": 1,
            "description": "A class which packs an object when passed to its .serialize function",
            "is_constructor": 1
        },
        "OutDescription": {
            "name": "OutDescription",
            "shortname": "OutDescription",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/out_description.js",
            "line": 1,
            "description": "A class which unpacks an object when passed to its .serialize function",
            "is_constructor": 1
        },
        "Registry": {
            "name": "Registry",
            "shortname": "Registry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/registry.js",
            "line": 3,
            "description": "Manages the registration of classes for consistent\nserialization/unserialization",
            "is_constructor": 1
        },
        "Rpc": {
            "name": "Rpc",
            "shortname": "Rpc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/rpc.js",
            "line": 1,
            "description": "A POD class representing an RPC definition",
            "is_constructor": 1
        },
        "Wasabi": {
            "name": "Wasabi",
            "shortname": "Wasabi",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/wasabi.js",
            "line": 26,
            "description": "Facade class for interacting with Wasabi"
        }
    },
    "classitems": [
        {
            "file": "src/bitstream.js",
            "line": 22,
            "itemtype": "method",
            "name": "bitsLeft",
            "return": {
                "description": "the number of bits which can be read without causing an overread",
                "type": "Number"
            },
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 30,
            "description": "Empty the buffer and reset the index",
            "itemtype": "method",
            "name": "empty",
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 40,
            "description": "Move the index to the first index >= the current index which is\nthe beginning of a cell. Useful for burning off any padding when\nprocessing data from \"appendData\" since it pads to the nearest\nmultiple of 7",
            "itemtype": "method",
            "name": "align",
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 55,
            "description": "Set the `n` bits starting at `offset` to contain the unsigned integer `value`.",
            "itemtype": "method",
            "name": "_setBits",
            "params": [
                {
                    "name": "offset",
                    "description": "The zero-based bit offset to start at",
                    "type": "Number"
                },
                {
                    "name": "n",
                    "description": "The number of bits to pack the value in to",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to pack. Will be cast to an\nunsigned integer and truncated or padded to n bits",
                    "type": "Number"
                }
            ],
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 97,
            "description": "Return the value of the first n bits starting at offset",
            "itemtype": "method",
            "name": "_getBits",
            "params": [
                {
                    "name": "offset",
                    "description": "The zero-based bit offset to start at",
                    "type": "Number"
                },
                {
                    "name": "n",
                    "description": "The number of bits to unpack the value from",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The unsigned value after unpacking",
                "type": "Number"
            },
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 176,
            "description": "Convert the data to a valid UTF-8 string",
            "itemtype": "method",
            "name": "toChars",
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 189,
            "description": "Read an unsigned integer *without* consuming any bits",
            "itemtype": "method",
            "name": "peekUInt",
            "params": [
                {
                    "name": "bits",
                    "description": "The number of bits to unpack",
                    "type": "Number"
                }
            ],
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 199,
            "description": "Read an unsigned integer consuming the specified number of bits",
            "itemtype": "method",
            "name": "readUInt",
            "params": [
                {
                    "name": "bits",
                    "description": "The number of bits to unpack",
                    "type": "Number"
                }
            ],
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 210,
            "description": "Write an unsigned integer using the specified number of bits",
            "itemtype": "method",
            "name": "writeUInt",
            "params": [
                {
                    "name": "value",
                    "description": "Value to write.",
                    "type": "Number"
                },
                {
                    "name": "bits",
                    "description": "The number of bits to unpack",
                    "type": "Number"
                }
            ],
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 221,
            "description": "read a signed integer without consuming any bits",
            "itemtype": "method",
            "name": "peekSInt",
            "params": [
                {
                    "name": "bits",
                    "description": "The number of bits to unpack",
                    "type": "Number"
                }
            ],
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 232,
            "description": "read a signed integer consuming the specified number of bits",
            "itemtype": "method",
            "name": "readSInt",
            "params": [
                {
                    "name": "bits",
                    "description": "The number of bits to unpack",
                    "type": "Number"
                }
            ],
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 243,
            "description": "write a signed integer using the specified number of bits",
            "itemtype": "method",
            "name": "writeSInt",
            "params": [
                {
                    "name": "value",
                    "description": "Value to write. Will be truncated or padded\nto the specified number of bits",
                    "type": "Number"
                },
                {
                    "name": "bits",
                    "description": "The number of bits to unpack",
                    "type": "Number"
                }
            ],
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 257,
            "description": "Pack an object with a .serialize() method into this bitstream",
            "itemtype": "method",
            "name": "pack",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to serialize",
                    "type": "NetObject"
                }
            ],
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 269,
            "description": "Unpack an object with a .serialize() method from this bitstream",
            "itemtype": "method",
            "name": "unpack",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to deserialize to",
                    "type": "NetObject"
                }
            ],
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 282,
            "description": "See if the contents and byte length of the buffer of this Bitstream\nand `other` are exactly  equal",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "other",
                    "description": "The bitstream to compare with",
                    "type": "Bitstream"
                }
            ],
            "return": {
                "description": "`true` if the bistreams are effectively equal",
                "type": "Boolean"
            },
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 303,
            "description": "Advance the head by the specified number of bits and check for\noverread",
            "itemtype": "method",
            "name": "_advance",
            "params": [
                {
                    "name": "bits",
                    "description": "The number of bits to advance the index by",
                    "type": "Number"
                }
            ],
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 316,
            "description": "Extend the buffer size by the specified number of bits. Also\nadvances the index",
            "itemtype": "method",
            "name": "_extend",
            "params": [
                {
                    "name": "bits",
                    "description": "The number of bits to expand the buffer by",
                    "type": "Number"
                }
            ],
            "class": "Bitstream"
        },
        {
            "file": "src/bitstream.js",
            "line": 328,
            "description": "Create a bitstream from a valid UTF-8 string",
            "static": 1,
            "itemtype": "method",
            "name": "fromChars",
            "class": "Bitstream"
        },
        {
            "file": "src/registry.js",
            "line": 26,
            "description": "Return a unique hash from a klass suitable for entering into the\nregistry's klass table",
            "itemtype": "method",
            "name": "hash",
            "return": {
                "description": "The XOR hash of the characters of\nklass.prototype.constructor.name",
                "type": "Number"
            },
            "class": "Registry"
        },
        {
            "file": "src/registry.js",
            "line": 42,
            "description": "Register a class with Wasabi, allowing it to transmit instances of\nthis class through a Connection",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "klass",
                    "description": "The constructor of the class to add",
                    "type": "Function"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "src/registry.js",
            "line": 96,
            "description": "Create an RPC from the supplied procedure function and serialize\nfunction. `instance` must be a {{#crossLink \"Wasabi\"}}{{/crossLink}} instance",
            "itemtype": "method",
            "name": "mkRpc",
            "params": [
                {
                    "name": "fn",
                    "description": "The local function to call when the RPC is invoked\non a remote host",
                    "type": "Function"
                },
                {
                    "name": "serialize",
                    "description": "A serialize function describing the\narguments used by this RPC",
                    "type": "Function"
                },
                {
                    "name": "instance",
                    "description": "The Wasabi instance to register this RPC with",
                    "type": "Wasabi"
                }
            ],
            "return": {
                "description": "The function you should call remotely to invoke the\nRPC on a connection",
                "type": "Function"
            },
            "class": "Registry"
        },
        {
            "file": "src/registry.js",
            "line": 124,
            "description": "Register an instance of a klass",
            "itemtype": "method",
            "name": "addObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to add to the registry",
                    "type": "NetObject"
                },
                {
                    "name": "serial",
                    "description": "The serial number to assign to this object. If\nfalsy, the nextSerialNumber will be used",
                    "type": "Nunmber"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "src/registry.js",
            "line": 154,
            "description": "Get an instance of a klass by serial number",
            "itemtype": "method",
            "name": "getObject",
            "class": "Registry"
        },
        {
            "file": "src/registry.js",
            "line": 162,
            "description": "Get the function/constructor/klass represented by the given hash",
            "itemtype": "method",
            "name": "getClass",
            "class": "Registry"
        },
        {
            "file": "src/registry.js",
            "line": 170,
            "description": "get the RPC function associated with the hash",
            "itemtype": "method",
            "name": "getRpc",
            "class": "Registry"
        },
        {
            "file": "src/wasabi.js",
            "line": 6,
            "description": "Named and exported function that would otherwise be an IIFE. Used to\ninstantiate a second Wasabi module for use in tests (to simulate a remote\nclient)",
            "itemtype": "method",
            "name": "makeWasabi",
            "static": 1,
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 43,
            "description": "Register a class with Wasabi, allowing it to transmit instances of\nthis class through a Connection",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "klass",
                    "description": "The constructor of the class to add",
                    "type": "Function"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 53,
            "description": "Register an instance of a klass, which can then be sent to\nconnected clients as needed (based on the results of their\n`scopeCallback`s).\n\n*Note: This method should only be called manually on\nauthoritative peers (i.e. server-side).* Wasabi clients will\nautomatically add instances to the Registry when their ghosts\nare unpacked",
            "itemtype": "method",
            "name": "addObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to add to the registry",
                    "type": "NetObject"
                },
                {
                    "name": "serial",
                    "description": "The serial number to assign to this object. If\nfalsy, the nextSerialNumber will be used",
                    "type": "Number"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 72,
            "description": "Unregister an instance of a klass",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "arg",
                    "description": "Either a NetObject or a serial number to be\nremoved from the registry",
                    "type": "Mixed"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 82,
            "description": "create an RPC from the supplied procedure function and serialize\nfunction.",
            "itemtype": "method",
            "name": "mkRpc",
            "params": [
                {
                    "name": "fn",
                    "description": "The local function to call when the RPC is invoked\non a remote host",
                    "type": "Function"
                },
                {
                    "name": "serialize",
                    "description": "A serialize function describing the\narguments used by this RPC",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The function you should call remotely to invoke the\nRPC on a connection",
                "type": "Function"
            },
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 97,
            "description": "attach to a server connected through the socket object",
            "itemtype": "method",
            "name": "addServer",
            "params": [
                {
                    "name": "sock",
                    "description": "The socket object used to communicate\nwith the new server",
                    "type": "Socket"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 109,
            "description": "Remove a server by its socket object",
            "itemtype": "method",
            "name": "removeServer",
            "params": [
                {
                    "name": "sock",
                    "description": "The socket object originally passed to addServer",
                    "type": "Socket"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 124,
            "description": "Attach a client connected through the given socket object.\nCurrently this must be a socket.io socket",
            "itemtype": "method",
            "name": "addClient",
            "params": [
                {
                    "name": "client",
                    "description": "The socket object used to communicate\nwith the new client",
                    "type": "Socket"
                },
                {
                    "name": "scopeCallback",
                    "description": "See {{#crossLink\n\"Connection\"}}{{/crossLink}}",
                    "type": "Function"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 139,
            "description": "Remove a client by its socket object",
            "itemtype": "method",
            "name": "removeClient",
            "params": [
                {
                    "name": "sock",
                    "description": "The socket object originally passed to addClient",
                    "type": "Socket"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 154,
            "description": "Process the incoming and outgoing data for all connected clients and\nservers",
            "itemtype": "method",
            "name": "processConnections",
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 177,
            "description": "packs update data for obj",
            "itemtype": "method",
            "name": "_packUpdate",
            "access": "private",
            "tagname": "",
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 187,
            "description": "unpacks update data for an object",
            "itemtype": "method",
            "name": "_unpackUpdate",
            "access": "private",
            "tagname": "",
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 202,
            "description": "Packs data needed to instantiate a replicated version of obj",
            "itemtype": "method",
            "name": "_packGhost",
            "access": "private",
            "tagname": "",
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 212,
            "description": "Unpacks a newly replicated object from Bitstream",
            "itemtype": "method",
            "name": "_unpackGhost",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "bs",
                    "description": "The target bitstream",
                    "type": "Bitstream"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 238,
            "description": "Packs ghosts for needed objects into bs",
            "itemtype": "method",
            "name": "_packGhosts",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "objects",
                    "description": "An Array or map of objects to pack ghosts for",
                    "type": "Object"
                },
                {
                    "name": "bs",
                    "description": "The target Bitstream",
                    "type": "Bitstream"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 255,
            "description": "Unpack all needed ghosts from bs",
            "itemtype": "method",
            "name": "_unpackGhosts",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "bs",
                    "description": "The source Bitstream",
                    "type": "Bitstream"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 270,
            "description": "Packs removed ghosts for `objects` into `bs`",
            "itemtype": "method",
            "name": "_packRemovedGhosts",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "objects",
                    "description": "An Array or map of objects to pack ghosts for",
                    "type": "Object"
                },
                {
                    "name": "bs",
                    "description": "The target Bitstream",
                    "type": "Bitstream"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 286,
            "description": "Unpack all needed removed ghosts from bs",
            "itemtype": "method",
            "name": "_unpackRemovedGhosts",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "bs",
                    "description": "The source Bitstream",
                    "type": "Bitstream"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 309,
            "description": "Pack the given list of object update data into bs",
            "itemtype": "method",
            "name": "_packUpdates",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "list",
                    "description": "An Array or map of objects to pack updates for",
                    "type": "Object"
                },
                {
                    "name": "bs",
                    "description": "The target Bitstream",
                    "type": "Bitstream"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 324,
            "description": "Unpack the given list of objects (with update data) from bs",
            "itemtype": "method",
            "name": "_unpackUpdates",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "bs",
                    "description": "The source Bitstream",
                    "type": "Bitstream"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 345,
            "description": "Pack an RPC invocation to the appropriate connections",
            "itemtype": "method",
            "name": "_invokeRpc",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "rpc",
                    "description": "the rpc to invoke",
                    "type": "Rpc"
                },
                {
                    "name": "args",
                    "description": "the arguments to the rpc",
                    "type": "Object"
                },
                {
                    "name": "obj",
                    "description": "the obj to use as the context the\ninvocation, or false for static invocations",
                    "type": "NetObject"
                },
                {
                    "name": "conns",
                    "description": "falsy to invoke the rpc on all connections.\nOtherwise must be a connection or array of connections to emit\nthe invocation to",
                    "type": "Mixed"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 389,
            "description": "Pack all RPC invocations in the specified `Connection`'s queue.",
            "itemtype": "method",
            "name": "_packRpcs",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "conn",
                    "description": "The connection to pack RPC invocations for",
                    "type": "Connection"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 405,
            "description": "Pack a call to a registered RP and the supplied arguments into bs",
            "itemtype": "method",
            "name": "_packRpc",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "rpc",
                    "description": "The RPC to pack",
                    "type": "Rpc"
                },
                {
                    "name": "args",
                    "description": "The arguments object to be serialized\ninto this invocation",
                    "type": "Object"
                },
                {
                    "name": "obj",
                    "description": "The NetObject to apply the RPC to (or\nfalsy for \"static\" RPC invocation",
                    "type": "NetObject"
                },
                {
                    "name": "bs",
                    "description": "The target Bitstream",
                    "type": "Bitstream"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 424,
            "description": "Unpack and execute a call to a registered RP using the supplied\narguments from bs",
            "itemtype": "method",
            "name": "_unpackRpc",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "bs",
                    "description": "The source Bitstream",
                    "type": "Bitstream"
                },
                {
                    "name": "conn",
                    "description": "The connection this RPC was invoked from",
                    "type": "Connection"
                }
            ],
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 455,
            "description": "Returns a clone of the registry's object table. used as a fallback\nwhen no _scopeCallback is specified for a connection",
            "itemtype": "method",
            "name": "_getAllObjects",
            "access": "private",
            "tagname": "",
            "class": "Wasabi"
        },
        {
            "file": "src/wasabi.js",
            "line": 470,
            "description": "Receive, process, and transmit data as needed for this connection",
            "itemtype": "method",
            "name": "_processConnection",
            "access": "private",
            "tagname": "",
            "class": "Wasabi"
        }
    ],
    "warnings": []
}